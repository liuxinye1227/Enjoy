<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.facishare.pay.business.dao.impl.UserTransferDaoImpl">
    
    <resultMap id="BaseResultMap" type="userTransferDo">
        <id property="id" column="id" />
        <result property="orderNo" column="order_no" />
        <result property="amount" column="amount" />
        <result property="fromUserId" column="from_user_id" />
        <result property="toUserId" column="to_user_id" />
        <result property="fromEnterpriseAccount" column="from_enterprise_account" />
        <result property="toEnterpriseAccount" column="to_enterprise_account" />
        <result property="createTime" column="create_time" />
        <result property="status" column="status" typeHandler="com.facishare.pay.common.utils.EnumStatusHandler"/>
        <result property="updateTime" column="update_time" />
    </resultMap>

    <insert id="addUserTransferDo"  parameterType="userTransferDo" useGeneratedKeys="true" keyProperty="id">

        <selectKey resultType="Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into user_transfer
        (
        order_no,
        amount,
        from_user_id,
        to_user_id,
        from_enterprise_account,
        to_enterprise_account,
        create_time,
        status
        )
        VALUES (
           #{orderNo},
           #{amount},
           #{fromUserId},
           #{toUserId},
           #{fromEnterpriseAccount},
           #{toEnterpriseAccount},
           #{createTime},
           #{status}
        )
    </insert>

    <update id="updateUserTransfer" parameterType="map">
        update user_transfer
        set status=#{status}, update_time=#{updateTime}
        WHERE order_no = #{orderNo}
        AND status =#{oldStatus}
    </update>

    <sql id="All_Column">
        id,
        order_no,
        amount,
        from_user_id,
        to_user_id,
        from_enterprise_account,
        to_enterprise_account,
        create_time,
        status,
        update_time
    </sql>

    <!-- 分页查询用户转账流水 -->
	<select id="queryUserTransferPage" parameterType="map" resultMap="BaseResultMap">
        SELECT 
        <include refid="All_Column"></include>
        FROM user_transfer userTransfer
        <include refid="userTransferCondition"></include>
        ORDER BY create_time DESC
        limit #{limit} offset #{offset}
    </select>
    
    <!-- 查询用户转账流水总数 -->
    <select id="queryUserTransferCount" parameterType="map" resultType="long">
        SELECT 
            COUNT(*)
        FROM user_transfer userTransfer
        <include refid="userTransferCondition"></include>
    </select>
    
    <!-- 根据orderNo查询用户转账流水 -->
    <select id="queryUserTransferByOrderNo" parameterType="map" resultMap="BaseResultMap">
        SELECT 
        <include refid="All_Column"></include>
        FROM user_transfer
        where order_no = #{orderNo}
    </select>
    
    <!-- 更新状态 -->
    <update id="updateTransferStatus" parameterType="map">
        UPDATE user_transfer SET status = #{status} WHERE id = #{id}
    </update>
	
    <sql id="userTransferCondition">
        <where>
            <if test="orderNo != null">
                userTransfer.order_no = #{orderNo}
            </if>
            <if test="minAmount != null">
                <![CDATA[AND userTransfer.amount >= #{minAmount}]]>  
            </if>
            <if test="maxAmount != null">
                <![CDATA[AND userTransfer.amount < #{maxAmount}]]>  
            </if>
            <if test="fromUserId != null">
                AND userTransfer.from_user_id = #{fromUserId}
            </if>
            <if test="toUserId != null">
                AND userTransfer.to_user_id = #{toUserId}
            </if>
            <if test="fromEnterpriseAccount != null">
                AND userTransfer.from_enterprise_account = #{fromEnterpriseAccount}
            </if>
            <if test="toEnterpriseAccount != null">
                AND userTransfer.to_enterprise_account = #{toEnterpriseAccount}
            </if>
            <if test="status != null">
                AND userTransfer.status = #{status}
            </if>
            <if test="beginTime != null">
                <![CDATA[
                AND userTransfer.create_time >= #{beginTime}
                ]]>                 
            </if>
            <if test="endTime != null">
                <![CDATA[
                AND userTransfer.create_time < #{endTime}
                ]]>
            </if>
        </where>
    </sql>
</mapper>
